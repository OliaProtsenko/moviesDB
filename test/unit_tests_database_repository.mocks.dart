// Mocks generated by Mockito 5.0.17 from annotations
// in movies/test/unit_tests_database_repository.dart.
// Do not manually edit this file.

import 'dart:async' as _i7;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movies/dao/actor_dao.dart' as _i2;
import 'package:movies/dao/actors_for_movies_dao.dart' as _i5;
import 'package:movies/dao/genre_dao.dart' as _i4;
import 'package:movies/dao/movie_dao.dart' as _i3;
import 'package:movies/dao/movies_for_genres_dao.dart' as _i6;
import 'package:movies/database.dart' as _i11;
import 'package:movies/models/actor_model.dart' as _i10;
import 'package:movies/models/actors_for_movies.dart' as _i15;
import 'package:movies/models/genre_model.dart' as _i12;
import 'package:movies/models/movie_model.dart' as _i9;
import 'package:movies/models/movies_for_genres.dart' as _i14;
import 'package:movies/repository/http_repository.dart' as _i13;
import 'package:sqflite/sqflite.dart' as _i8;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeActorDao_0 extends _i1.Fake implements _i2.ActorDao {}

class _FakeMovieDao_1 extends _i1.Fake implements _i3.MovieDao {}

class _FakeGenreDao_2 extends _i1.Fake implements _i4.GenreDao {}

class _FakeActorsForMoviesDao_3 extends _i1.Fake
    implements _i5.ActorsForMoviesDao {}

class _FakeMoviesForGenresDao_4 extends _i1.Fake
    implements _i6.MoviesForGenresDao {}

class _FakeStreamController_5<T> extends _i1.Fake
    implements _i7.StreamController<T> {}

class _FakeDatabaseExecutor_6 extends _i1.Fake implements _i8.DatabaseExecutor {
}

class _FakeMovieModel_7 extends _i1.Fake implements _i9.MovieModel {}

class _FakeActorModel_8 extends _i1.Fake implements _i10.ActorModel {}

/// A class which mocks [AppDatabase].
///
/// See the documentation for Mockito's code generation for more information.
class MockAppDatabase extends _i1.Mock implements _i11.AppDatabase {
  MockAppDatabase() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.ActorDao get actorDao => (super.noSuchMethod(Invocation.getter(#actorDao),
      returnValue: _FakeActorDao_0()) as _i2.ActorDao);
  @override
  _i3.MovieDao get movieDao => (super.noSuchMethod(Invocation.getter(#movieDao),
      returnValue: _FakeMovieDao_1()) as _i3.MovieDao);
  @override
  _i4.GenreDao get genreDao => (super.noSuchMethod(Invocation.getter(#genreDao),
      returnValue: _FakeGenreDao_2()) as _i4.GenreDao);
  @override
  _i5.ActorsForMoviesDao get actorsForMoviesDao =>
      (super.noSuchMethod(Invocation.getter(#actorsForMoviesDao),
          returnValue: _FakeActorsForMoviesDao_3()) as _i5.ActorsForMoviesDao);
  @override
  _i6.MoviesForGenresDao get moviesForGenresDao =>
      (super.noSuchMethod(Invocation.getter(#moviesForGenresDao),
          returnValue: _FakeMoviesForGenresDao_4()) as _i6.MoviesForGenresDao);
  @override
  _i7.StreamController<String> get changeListener =>
      (super.noSuchMethod(Invocation.getter(#changeListener),
              returnValue: _FakeStreamController_5<String>())
          as _i7.StreamController<String>);
  @override
  set changeListener(_i7.StreamController<String>? _changeListener) =>
      super.noSuchMethod(Invocation.setter(#changeListener, _changeListener),
          returnValueForMissingStub: null);
  @override
  _i8.DatabaseExecutor get database =>
      (super.noSuchMethod(Invocation.getter(#database),
          returnValue: _FakeDatabaseExecutor_6()) as _i8.DatabaseExecutor);
  @override
  set database(_i8.DatabaseExecutor? _database) =>
      super.noSuchMethod(Invocation.setter(#database, _database),
          returnValueForMissingStub: null);
  @override
  _i7.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
}

/// A class which mocks [GenreDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockGenreDao extends _i1.Mock implements _i4.GenreDao {
  MockGenreDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i12.GenreModel>?> getAllRecords() =>
      (super.noSuchMethod(Invocation.method(#getAllRecords, []),
              returnValue: Future<List<_i12.GenreModel>?>.value())
          as _i7.Future<List<_i12.GenreModel>?>);
  @override
  _i7.Future<_i12.GenreModel?> findGenreById(int? id) =>
      (super.noSuchMethod(Invocation.method(#findGenreById, [id]),
              returnValue: Future<_i12.GenreModel?>.value())
          as _i7.Future<_i12.GenreModel?>);
  @override
  _i7.Future<_i12.GenreModel?> findGenreByName(String? name) =>
      (super.noSuchMethod(Invocation.method(#findGenreByName, [name]),
              returnValue: Future<_i12.GenreModel?>.value())
          as _i7.Future<_i12.GenreModel?>);
  @override
  _i7.Future<int> insertGenre(_i12.GenreModel? actor) =>
      (super.noSuchMethod(Invocation.method(#insertGenre, [actor]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<int> updateGenre(_i12.GenreModel? genre) =>
      (super.noSuchMethod(Invocation.method(#updateGenre, [genre]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<void> deleteGenre(_i12.GenreModel? genre) =>
      (super.noSuchMethod(Invocation.method(#deleteGenre, [genre]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<int> deleteGenres(List<_i12.GenreModel>? genre) =>
      (super.noSuchMethod(Invocation.method(#deleteGenres, [genre]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
}

/// A class which mocks [HttpMovieRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpMovieRepository extends _i1.Mock
    implements _i13.HttpMovieRepository {
  MockHttpMovieRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i12.GenreModel>> getGenres() => (super.noSuchMethod(
          Invocation.method(#getGenres, []),
          returnValue: Future<List<_i12.GenreModel>>.value(<_i12.GenreModel>[]))
      as _i7.Future<List<_i12.GenreModel>>);
  @override
  _i7.Future<List<_i9.MovieModel>> getMovies({_i12.GenreModel? genre}) =>
      (super.noSuchMethod(Invocation.method(#getMovies, [], {#genre: genre}),
              returnValue:
                  Future<List<_i9.MovieModel>>.value(<_i9.MovieModel>[]))
          as _i7.Future<List<_i9.MovieModel>>);
  @override
  _i7.Future<_i9.MovieModel> searchMovieById({dynamic movieId}) =>
      (super.noSuchMethod(
              Invocation.method(#searchMovieById, [], {#movieId: movieId}),
              returnValue: Future<_i9.MovieModel>.value(_FakeMovieModel_7()))
          as _i7.Future<_i9.MovieModel>);
  @override
  _i7.Future<List<_i10.ActorModel>> getActorsForMovie({dynamic movieId}) =>
      (super.noSuchMethod(
              Invocation.method(#getActorsForMovie, [], {#movieId: movieId}),
              returnValue:
                  Future<List<_i10.ActorModel>>.value(<_i10.ActorModel>[]))
          as _i7.Future<List<_i10.ActorModel>>);
  @override
  _i7.Future<_i10.ActorModel> getActorById({dynamic actorId}) =>
      (super.noSuchMethod(
              Invocation.method(#getActorById, [], {#actorId: actorId}),
              returnValue: Future<_i10.ActorModel>.value(_FakeActorModel_8()))
          as _i7.Future<_i10.ActorModel>);
  @override
  _i7.Future<List<_i9.MovieModel>> searchMovieByName(String? search) =>
      (super.noSuchMethod(Invocation.method(#searchMovieByName, [search]),
              returnValue:
                  Future<List<_i9.MovieModel>>.value(<_i9.MovieModel>[]))
          as _i7.Future<List<_i9.MovieModel>>);
}

/// A class which mocks [ActorDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockActorDao extends _i1.Mock implements _i2.ActorDao {
  MockActorDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i10.ActorModel>?> getAllRecords() =>
      (super.noSuchMethod(Invocation.method(#getAllRecords, []),
              returnValue: Future<List<_i10.ActorModel>?>.value())
          as _i7.Future<List<_i10.ActorModel>?>);
  @override
  _i7.Future<_i10.ActorModel?> findActorById(int? id) =>
      (super.noSuchMethod(Invocation.method(#findActorById, [id]),
              returnValue: Future<_i10.ActorModel?>.value())
          as _i7.Future<_i10.ActorModel?>);
  @override
  _i7.Future<int> updateActor(_i10.ActorModel? actor) =>
      (super.noSuchMethod(Invocation.method(#updateActor, [actor]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<int> insertActor(_i10.ActorModel? actor) =>
      (super.noSuchMethod(Invocation.method(#insertActor, [actor]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<void> deleteActor(_i10.ActorModel? actor) =>
      (super.noSuchMethod(Invocation.method(#deleteActor, [actor]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<int> deleteActors(List<_i10.ActorModel>? actors) =>
      (super.noSuchMethod(Invocation.method(#deleteActors, [actors]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
}

/// A class which mocks [MovieDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDao extends _i1.Mock implements _i3.MovieDao {
  MockMovieDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i9.MovieModel>?> getAllRecords() =>
      (super.noSuchMethod(Invocation.method(#getAllRecords, []),
              returnValue: Future<List<_i9.MovieModel>?>.value())
          as _i7.Future<List<_i9.MovieModel>?>);
  @override
  _i7.Future<_i9.MovieModel?> findMovieById(int? id) =>
      (super.noSuchMethod(Invocation.method(#findMovieById, [id]),
              returnValue: Future<_i9.MovieModel?>.value())
          as _i7.Future<_i9.MovieModel?>);
  @override
  _i7.Future<_i9.MovieModel?> findMovieByTitle(String? title) =>
      (super.noSuchMethod(Invocation.method(#findMovieByTitle, [title]),
              returnValue: Future<_i9.MovieModel?>.value())
          as _i7.Future<_i9.MovieModel?>);
  @override
  _i7.Future<int> insertMovie(_i9.MovieModel? movie) =>
      (super.noSuchMethod(Invocation.method(#insertMovie, [movie]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<int> updateMovie(_i9.MovieModel? movie) =>
      (super.noSuchMethod(Invocation.method(#updateMovie, [movie]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
  @override
  _i7.Future<void> deleteMovie(_i9.MovieModel? movie) =>
      (super.noSuchMethod(Invocation.method(#deleteMovie, [movie]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<int> deleteActors(List<_i9.MovieModel>? movies) =>
      (super.noSuchMethod(Invocation.method(#deleteActors, [movies]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
}

/// A class which mocks [MoviesForGenresDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviesForGenresDao extends _i1.Mock
    implements _i6.MoviesForGenresDao {
  MockMoviesForGenresDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i14.MoviesForGenres>?> getAllRecords() =>
      (super.noSuchMethod(Invocation.method(#getAllRecords, []),
              returnValue: Future<List<_i14.MoviesForGenres>?>.value())
          as _i7.Future<List<_i14.MoviesForGenres>?>);
  @override
  _i7.Future<List<_i14.MoviesForGenres>?> findByGenreId(int? id) =>
      (super.noSuchMethod(Invocation.method(#findByGenreId, [id]),
              returnValue: Future<List<_i14.MoviesForGenres>?>.value())
          as _i7.Future<List<_i14.MoviesForGenres>?>);
  @override
  _i7.Future<List<_i14.MoviesForGenres>?> findByMovieId(int? id) =>
      (super.noSuchMethod(Invocation.method(#findByMovieId, [id]),
              returnValue: Future<List<_i14.MoviesForGenres>?>.value())
          as _i7.Future<List<_i14.MoviesForGenres>?>);
  @override
  _i7.Future<void> insertMoviesForGenres(_i14.MoviesForGenres? actor) =>
      (super.noSuchMethod(Invocation.method(#insertMoviesForGenres, [actor]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> deleteMovieForGenre(_i14.MoviesForGenres? movieForGenre) =>
      (super.noSuchMethod(
          Invocation.method(#deleteMovieForGenre, [movieForGenre]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<int> deleteMoviesForGenres(
          List<_i14.MoviesForGenres>? moviesForGenres) =>
      (super.noSuchMethod(
          Invocation.method(#deleteMoviesForGenres, [moviesForGenres]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
}

/// A class which mocks [ActorsForMoviesDao].
///
/// See the documentation for Mockito's code generation for more information.
class MockActorsForMoviesDao extends _i1.Mock
    implements _i5.ActorsForMoviesDao {
  MockActorsForMoviesDao() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i7.Future<List<_i15.ActorsForMovies>?> getAllRecords() =>
      (super.noSuchMethod(Invocation.method(#getAllRecords, []),
              returnValue: Future<List<_i15.ActorsForMovies>?>.value())
          as _i7.Future<List<_i15.ActorsForMovies>?>);
  @override
  _i7.Future<List<_i15.ActorsForMovies>?> findByActorId(int? id) =>
      (super.noSuchMethod(Invocation.method(#findByActorId, [id]),
              returnValue: Future<List<_i15.ActorsForMovies>?>.value())
          as _i7.Future<List<_i15.ActorsForMovies>?>);
  @override
  _i7.Future<List<_i15.ActorsForMovies>?> findByMovieId(int? id) =>
      (super.noSuchMethod(Invocation.method(#findByMovieId, [id]),
              returnValue: Future<List<_i15.ActorsForMovies>?>.value())
          as _i7.Future<List<_i15.ActorsForMovies>?>);
  @override
  _i7.Future<void> insertActorsForMovies(_i15.ActorsForMovies? actor) =>
      (super.noSuchMethod(Invocation.method(#insertActorsForMovies, [actor]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<void> deleteActorForMovie(_i15.ActorsForMovies? actorForMovie) =>
      (super.noSuchMethod(
          Invocation.method(#deleteActorForMovie, [actorForMovie]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i7.Future<void>);
  @override
  _i7.Future<int> deleteActorsForMovies(
          List<_i15.ActorsForMovies>? actorsForMovies) =>
      (super.noSuchMethod(
          Invocation.method(#deleteActorsForMovies, [actorsForMovies]),
          returnValue: Future<int>.value(0)) as _i7.Future<int>);
}
