// Mocks generated by Mockito 5.0.17 from annotations
// in movies/test/home_screen_widget_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i10;
import 'dart:ui' as _i14;

import 'package:mockito/mockito.dart' as _i1;
import 'package:movies/dao/actor_dao.dart' as _i4;
import 'package:movies/dao/actors_for_movies_dao.dart' as _i7;
import 'package:movies/dao/genre_dao.dart' as _i6;
import 'package:movies/dao/movie_dao.dart' as _i5;
import 'package:movies/dao/movies_for_genres_dao.dart' as _i8;
import 'package:movies/database.dart' as _i2;
import 'package:movies/models/actor_model.dart' as _i13;
import 'package:movies/models/genre_model.dart' as _i11;
import 'package:movies/models/movie_model.dart' as _i12;
import 'package:movies/repository/database_repository_implementation.dart'
    as _i9;
import 'package:movies/repository/repository.dart' as _i3;

// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeAppDatabase_0 extends _i1.Fake implements _i2.AppDatabase {}

class _FakeMovieRepository_1 extends _i1.Fake implements _i3.MovieRepository {}

class _FakeActorDao_2 extends _i1.Fake implements _i4.ActorDao {}

class _FakeMovieDao_3 extends _i1.Fake implements _i5.MovieDao {}

class _FakeGenreDao_4 extends _i1.Fake implements _i6.GenreDao {}

class _FakeActorsForMoviesDao_5 extends _i1.Fake
    implements _i7.ActorsForMoviesDao {}

class _FakeMoviesForGenresDao_6 extends _i1.Fake
    implements _i8.MoviesForGenresDao {}

/// A class which mocks [DatabaseRepositoryImplementation].
///
/// See the documentation for Mockito's code generation for more information.
class MockDatabaseRepositoryImplementation extends _i1.Mock
    implements _i9.DatabaseRepositoryImplementation {
  MockDatabaseRepositoryImplementation() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.AppDatabase get database =>
      (super.noSuchMethod(Invocation.getter(#database),
          returnValue: _FakeAppDatabase_0()) as _i2.AppDatabase);
  @override
  _i3.MovieRepository get httpRepository =>
      (super.noSuchMethod(Invocation.getter(#httpRepository),
          returnValue: _FakeMovieRepository_1()) as _i3.MovieRepository);
  @override
  _i4.ActorDao get actorsDao =>
      (super.noSuchMethod(Invocation.getter(#actorsDao),
          returnValue: _FakeActorDao_2()) as _i4.ActorDao);
  @override
  _i5.MovieDao get movieDao => (super.noSuchMethod(Invocation.getter(#movieDao),
      returnValue: _FakeMovieDao_3()) as _i5.MovieDao);
  @override
  _i6.GenreDao get genreDao => (super.noSuchMethod(Invocation.getter(#genreDao),
      returnValue: _FakeGenreDao_4()) as _i6.GenreDao);
  @override
  _i7.ActorsForMoviesDao get actorsForMoviesDao =>
      (super.noSuchMethod(Invocation.getter(#actorsForMoviesDao),
          returnValue: _FakeActorsForMoviesDao_5()) as _i7.ActorsForMoviesDao);
  @override
  _i8.MoviesForGenresDao get moviesForGenresDao =>
      (super.noSuchMethod(Invocation.getter(#moviesForGenresDao),
          returnValue: _FakeMoviesForGenresDao_6()) as _i8.MoviesForGenresDao);
  @override
  int get listenerCount =>
      (super.noSuchMethod(Invocation.getter(#listenerCount), returnValue: 0)
          as int);
  @override
  bool shouldRefreshFromApi(bool? forceRefresh, DateTime? lastFetchTime) =>
      (super.noSuchMethod(
          Invocation.method(
              #shouldRefreshFromApi, [forceRefresh, lastFetchTime]),
          returnValue: false) as bool);
  @override
  _i10.Future<void> refreshMoviesAndGenres(bool? notifyListeners) =>
      (super.noSuchMethod(
              Invocation.method(#refreshMoviesAndGenres, [notifyListeners]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> refreshActorsForMovie(
          bool? notifyListeners, int? movieId) =>
      (super.noSuchMethod(
          Invocation.method(#refreshActorsForMovie, [notifyListeners, movieId]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub:
              Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> updateGenre(_i11.GenreModel? genre) => (super.noSuchMethod(
      Invocation.method(#updateGenre, [genre]),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i10.Future<void>);
  @override
  _i10.Future<void> updateMovie(
          _i12.MovieModel? movie, _i11.GenreModel? genre) =>
      (super.noSuchMethod(Invocation.method(#updateMovie, [movie, genre]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> updateActor(
          _i13.ActorModel? actor, _i12.MovieModel? movie) =>
      (super.noSuchMethod(Invocation.method(#updateActor, [actor, movie]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> insertMoviesForGenres(
          _i12.MovieModel? movie, _i11.GenreModel? genre) =>
      (super.noSuchMethod(
              Invocation.method(#insertMoviesForGenres, [movie, genre]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<void> insertActorsForMovies(
          _i12.MovieModel? movie, _i13.ActorModel? actor) =>
      (super.noSuchMethod(
              Invocation.method(#insertActorsForMovies, [movie, actor]),
              returnValue: Future<void>.value(),
              returnValueForMissingStub: Future<void>.value())
          as _i10.Future<void>);
  @override
  _i10.Future<List<_i11.GenreModel>> getAllGenres(bool? forceRefresh) =>
      (super.noSuchMethod(Invocation.method(#getAllGenres, [forceRefresh]),
              returnValue:
                  Future<List<_i11.GenreModel>>.value(<_i11.GenreModel>[]))
          as _i10.Future<List<_i11.GenreModel>>);
  @override
  _i10.Future<List<_i12.MovieModel>> getAllMoviesOfGenre(
          _i11.GenreModel? genre, bool? forceRefresh) =>
      (super.noSuchMethod(
              Invocation.method(#getAllMoviesOfGenre, [genre, forceRefresh]),
              returnValue:
                  Future<List<_i12.MovieModel>>.value(<_i12.MovieModel>[]))
          as _i10.Future<List<_i12.MovieModel>>);
  @override
  _i10.Future<List<_i13.ActorModel>> getActorsForMovie(
          int? movieId, bool? forceRefresh) =>
      (super.noSuchMethod(
              Invocation.method(#getActorsForMovie, [movieId, forceRefresh]),
              returnValue:
                  Future<List<_i13.ActorModel>>.value(<_i13.ActorModel>[]))
          as _i10.Future<List<_i13.ActorModel>>);
  @override
  _i10.Future<_i13.ActorModel?> getActorById(
          int? actorId, bool? forceRefresh) =>
      (super.noSuchMethod(
              Invocation.method(#getActorById, [actorId, forceRefresh]),
              returnValue: Future<_i13.ActorModel?>.value())
          as _i10.Future<_i13.ActorModel?>);
  @override
  _i10.Future<_i12.MovieModel?> getMovieById(
          int? movieId, bool? forceRefresh) =>
      (super.noSuchMethod(
              Invocation.method(#getMovieById, [movieId, forceRefresh]),
              returnValue: Future<_i12.MovieModel?>.value())
          as _i10.Future<_i12.MovieModel?>);
  @override
  void addListener(_i14.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i14.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
